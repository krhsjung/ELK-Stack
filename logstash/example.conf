input {
    beats {
        port => 6000
    }
}


filter {
    grok {
        match => {
            # spring boot example project에서 저장되는 log pattern
            "message" => "\A%{TIMESTAMP_ISO8601:@timestamp}\s+(\[%{DATA:thread}\])\s+(\[%{WORD:loglevel}\])\s+(\[%{JAVACLASS:class}\])(\[%{WORD:method}\])\s+(-\s+)?%{GREEDYDATA:msg}"
        }
    }
 #   date {
 #       # 입력 이벤트의 timestamp 필드 형식을 지정합니다.
 #       match => [ "timestamp", "yyyy-MM-dd HH:mm:ss.SSS", "ISO8601" ]
 #       #timezone => "Asia/Seoul"
 #       #locale = > "ko"
 #       # @timestamp 필드로 복사합니다.
 #       target => "@timestamp"
 #   }
}


output {
    # 수신한 이벤트를 표준 출력으로 출력합니다. 실제 운영환경에서는 이 부분을 실제로 처리하는 부분으로 변경해야 합니다.
    stdout { codec => rubydebug }
    
    # elasticsearch data 전송
    elasticsearch {
        index => "logstash-%{+YYYY.MM.dd}"
        hosts=> "${ELASTIC_HOSTS}"
        user=> "${ELASTIC_USER}"
        password=> "${ELASTIC_PASSWORD}"
        cacert=> "certs/ca/ca.crt"
    }
}
